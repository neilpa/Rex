%{
import os
import sys

try:
    framework
except NameError:
    sys.exit("`-Dframework` is not specified. Expected `AppKit`, `UIKit` or `WatchKit`.")

try:
    target
except NameError:
    sys.exit("`-Dtarget` is not specified. Expected `macOS`, `iOS`, `tvOS` or `watchOS`.")

### Load the configuration file for the framework.

config_name = framework + "Extensions.gyb.py"
config_path = os.path.dirname(os.path.realpath(__file__)) + "/" + framework + "/" + config_name

if not os.path.exists(config_path):
    sys.exit(config_path + " was not found.")
execfile(config_path)

### Test if required configs are missing.

try:
    extension_info
except NameError:
    sys.exit("`extension_info` is missing.")

### Set default values for undefined configs.

try:
    import_frameworks
except NameError:
    import_frameworks = []

try:
    reusable_view_classes
except NameError:
    reusable_view_classes = []
}%
// ${config_name}
// This is auto-generated by gyb.

% for framework in import_frameworks:
import ${framework}
% end
import Foundation
import ReactiveSwift

% for class_name in reusable_view_classes:
extension ${class_name}: Reusable {}
% end

% for extending_class_name, properties in extension_info.items():
extension ${extending_class_name} {

% for (key, attributes) in properties.items():
% if "renamed" in attributes:
    @available(*, unavailable, renamed:"rex_${key}")
    public var rex_${attributes["renamed"]}: MutableProperty<${attributes["type"]}> { fatalError() }

% end
    public var rex_${key}: MutableProperty<${attributes["type"]}> {
% if "isControl" in attributes:
        return UIControl.rex_value(self,
                                   getter: { $0.${key} },
                                   setter: { $0.${key} = $1 })
% else:
        return associatedProperty(self,
                                  key: &rac${extending_class_name}${key[0].upper() + key[1:]}Key,
                                  initial: { $0.${key} },
                                  setter: { $0.${key} = $1 })
% end
	}

% end
}

% end

% for extending_class_name, properties in extension_info.items():
% for (key, attributes) in properties.items():
% if not "isControl" in attributes:
private var rac${extending_class_name}${key[0].upper() + key[1:]}Key = 0
% end
% end
% end
